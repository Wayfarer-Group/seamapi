# TODO this file should eventually be generated by looking at openapi.json

import abc
from typing import List, Optional, Union, Literal
from dataclasses import dataclass

DeviceId = str


@dataclass
class Device:
    device_id: DeviceId


@dataclass
class ActionAttempt:
    action_attempt_id: str
    status: Union[Literal["pending"], Literal["error"], Literal["complete"]]


@dataclass
class Workspace:
    workspace_id: str
    name: str


@dataclass
class AbstractSeam(abc.ABC):
    api_key: str
    api_url: str

    @abc.abstractmethod
    def __init__(self, api_key: Optional[str] = None):
        raise NotImplementedError


class AbstractLocks(abc.ABC):
    def list(self) -> List[Device]:
        raise NotImplementedError

    def get(self, workspace_id: Optional[str] = None) -> Device:
        raise NotImplementedError

    def lock_door(self, device: Union[DeviceId, Device]) -> ActionAttempt:
        raise NotImplementedError

    def unlock_door(self, device: Union[DeviceId, Device]) -> ActionAttempt:
        raise NotImplementedError


class AbstractActionAttempt(abc.ABC):
    def list(self) -> List[ActionAttempt]:
        raise NotImplementedError

    def get(self, workspace_id: Optional[str] = None) -> ActionAttempt:
        raise NotImplementedError


class AbstractDevices(abc.ABC):
    def list(self) -> List[Device]:
        raise NotImplementedError

    def get(self, workspace_id: Optional[str] = None) -> Device:
        raise NotImplementedError


class AbstractWorkspaces(abc.ABC):
    def list(self) -> List[Workspace]:
        raise NotImplementedError

    def get(self, workspace_id: Optional[str] = None) -> Workspace:
        raise NotImplementedError

    def reset_sandbox(
        self, workspace_id: Optional[str] = None, sandbox_type: Optional[str] = None
    ) -> None:
        raise NotImplementedError
